Quickstart
==========

This page assumes you already have Conservator CLI installed.  If you do not,
follow the :doc:`installation` instructions first.

This guide will show you how to perform basic operations using the CLI.
Please see the :doc:`api_quickstart` to get started using the Python API.

Config
-----------

The first step to interfacing with Conservator is setting your config.

Log in to your conservator instance, and find your API key.

Then run::

    $ conservator config

The first time you run this, Conservator CLI will ask you for your email and API key.
These will be saved in a config file for future use. Running again will print your
credentials. You can delete your config by running::

    $ conservator config delete

Getting Connected
-----------------

Now that we have our credentials, let's try connecting to Conservator::

    $ conservator stats

This should print out statistics for your conservator instance. If it doesn't,
you may be using a local developer installation that hasn't generated statistics
yet.

Exploring Conservator Data
--------------------------

There are several data containers on Conservator, and conservator-cli has tools
for exploring all of them.

We can query for a specific project::

    $ conservator projects get --id [some id]

Or get a list of all Projects::

    $ conservator projects list -p name

The same works for videos, datasets, and collections::

    $ conservator datasets list -p name
    $ conservator videos list -p name
    $ conservator collections list -p name

The ``-p`` flag controls which fields to fetch and print. You can view all
available fields using::

    $ conservator projects fields  # try with videos, datasets, and collections

We can also perform searches using Conservator's Advanced Search. To list the ids
of all datasets that contain a human annotated car, we can do::

    $ conservator datasets search "has:car"

And of course, with works with projects, videos and collections.

.. note::

    When searching projects, conservator doesn't support Advanced Search. You
    can't include certain characters in your query (for instance, `:`, `\`, or `?`).

Annotations
-----------

You can use :func:`Image.annotations` to automatically fetch the image's annotations::

    >>> list(image.annotations)
    [<Annotation label="car">, <Annotation label="person">]

You can also filter annotations::

    >>> list(image.annotations.with_props(label="car"))
    [<Annotation label="car">]


Downloading Images
----------------

When we get an :class:`Image` instance, we haven't actually gotten any of
the image's data. We've only gotten a bit of meta data::

    >>> image.details
    Details for <Image name="20191031_182208_168_8b.JPG">
        name="20191031_182208_168_8b.JPG"
        uploaded_by="someone@flir.com"
        id="Jrvb4bJq4Dicn7cZQ"

    Run .populate to load more details.

We can grab more meta data by running :func:`Image.populate()`. This will
add details such as the image's size, hash, and tags.  If you attempt to read
any of those fields before calling :func:`Image.populate()`, it will be called
for you.

Although we've gotten the image's meta data, we still don't have the actual image.
If we want to save it to the disk, we can use :func:`Image.download_to`.

    >>> image.download_to("~/Desktop")

Alternatively, we can get the image data as a ``numpy`` array::

    >>> image.download_as_numpy()
    ... 512x512 numpy array

In either case, we can specify if we want to use the full 16 bit images:

    >>> image.download_to("~/Desktop/16-bit.jpg", full_bits=True)


Uploading Data
--------------

It's very easy to add modifications to existing data::

    >>> annotation = list(image.annotations)[0]
    >>> annotation.label = "truck"
    >>> image.has_changed_locally
    True
    >>> image.upload()

To create new information, you need to get an instance of the class you want to upload::

    >>> dataset = conservator.make_new_dataset(name="New Dataset")
    >>> dataset.created_locally
    True
    >>> dataset.upload()

In either case, Conservator CLI is smart enough to know if it needs to submit an update query,
or an entirely new object.

In the case of images, you can pass a path::

    >>> new_image = conservator.make_new_image(name="New Image", path="~/Desktop/test.jpg")
    >>> new_image.created_locally
    True
    >>> new_image.upload()


Mass Operations and Statistics
------------------------------

Sometimes you're going to want to do big, complicated things.
For instance, lets say you want to determine how many images in all
of conservator contain a car::

    >>> conservator.images.search("has:car").count()
    34221

This operation probably took a while to complete, and it would take even
longer to compile a dictionary of all possible counts for every classifier.

If you want to perform lots of operations, it can be helpful to download
a lot of data locally, all at once. To do this, we use the :class:`ConservatorCache`::

    >>> conservator.cache
    <DataCache for <Conservator at flirconservator.com>>
    >>> conservator.cache.download_image_data()
    Starting <MassOperation op="download" type="image">...
    .
    .
    ...


See the :doc:`mass_operations` guide for more info.

Next Steps
----------

Hopefully this guide has helped you understand the basics of Conservator CLI.

Conservator CLI does it's best to abstract away as much as possible,
but sometimes that can get annoying. Check out the :doc:`advanced_guide` to learn how
the underlying features work, and how you can take advantage of them to build
your own tools.
