// //WORK IN PROGRESS
pipeline {
  agent {
    dockerfile {
      dir "test"
      label "docker"
      additionalBuildArgs "-t conservator-cli/test"
      args "--add-host conservator-mongo:127.0.0.1 --user root --init --privileged -v /var/run/docker.sock:/var/run/docker.sock"
    }
  }
  options {
    timeout(time: 45, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  environment {    
    CODEBASE = 'flirconservator-cli'
  }
  
  stages {
    stage('PR') {
      when {
        beforeAgent true        
        not {
          branch 'main'
        }
      }

      stages {
        stage("Install") {
          steps {
            sendNotifications("PR pipeline started")
            sh "echo 2.12.0 > RELEASE-VERSION"
            sh "pip install --no-cache-dir -r requirements.txt"
            sh "python setup.py --version"
            sh "pip install --no-cache-dir ."
            sh "git config --global user.name 'Test User'"
            sh "git config --global user.email 'test@example.com'"
          }
        }

        stage("Documentation Tests") {
          steps {
            echo "Building docs..."
            dir("docs") {
              sh "make html"
            }
          }
        }

        stage("Unit Tests") {
          steps {
            echo "Running unit tests..."
            dir("unit-tests") {
              sh "pytest -v $WORKSPACE/test/unit"
            }
          }
        }
      }
    } 
    
    stage('Main') {
      when {
        beforeAgent true
        branch 'main'
      }
      stages {
        stage('MAIN Build'){
          steps {
            script {
              sendNotifications("Merge to main pipeline started")
              def test = build job: 'Flirconservator+CLI_Integration_Testing', parameters: [string(name: 'IMAGE_TYPE', value: 'LOCAL'), string(name: 'LOCAL_BRANCH', value: 'master')]
            }
          }
        }
         stage("Install") {
          steps {
            sendNotifications("PR pipeline started")
            sh "echo 2.12.0 > RELEASE-VERSION"
            sh "pip install --no-cache-dir -r requirements.txt"
            sh "python setup.py --version"
            sh "pip install --no-cache-dir ."
            sh "git config --global user.name 'Test User'"
            sh "git config --global user.email 'test@example.com'"
          }
        }

          stage("Documentation Tests") {
          steps {
            echo "Building docs..."
            dir("docs") {
              sh "make html"
            }
          }
        }

        stage("Deploy Documentation") {
      when {       
        not { changeRequest() }
      }
      steps {
        echo "Deploying..."
        sh "mv docs/_build/html temp/"
        sh "git reset --hard"
        sh "rm -rf .git/hooks/*"
        sh "git checkout gh_pages"
        sh "rm -rf docs/"
        sh "mv temp/ docs/"
        sh "touch docs/.nojekyll"
        sh "git add docs/"
        sh "git commit -m 'Build docs for ${BUILD_TAG}' || echo 'Commit failed. There is probably nothing to commit.'"
        sshagent(credentials: ["flir-service-key"]) {
          sh "git push || echo 'Push failed. There is probably nothing to push.'"
        }
      }
    }
    stage("Release on PyPI") {       
      when {
        buildingTag()
      }
      environment {
        TWINE_REPOSITORY = "pypi"
        TWINE_USERNAME = "__token__"
        TWINE_PASSWORD = credentials("pypi-conservator-cli")
      }
      steps {        
        sh "echo $TWINE_PASSWORD | base64"
        sh "python setup.py --version"
        sh "pip install build twine"
        sh "python -m build"
        //check before
        //sh "python -m twine upload dist/*"
      }
    }

      }
    }
  }
  
  post {
    always {
      script {
        echo 'post'
        cleanWs()
        sendNotifications ("post")
      }
    }
    
    success {
      script {
        echo 'success'
      }
    }
    
    failure {
      echo 'fail'
    }
  }
}

def sendNotifications(String msg){
  //testing
  msg = "post"
  echo "sendNotification been called"
  

  //Send Slack message about proccess/
  TEAMS_WEBHOOK = credentials("Conservator-CICD-Incoming")
  println("TEAMS_WEBHOOK: ${TEAMS_WEBHOOK}")
  sh "echo ${TEAMS_WEBHOOK} | base64"
  sh """"
  curl -H 'Content-Type: application/json' -d '{\"text\": \"Jenkins Started to deploy = ${BUILD_URL}console\"}' ${TEAMS_WEBHOOK}
  """
  
  if (msg == "post"){
    echo "here"
    slackMsg = currentBuild.result
    header = "'Content-Type: application/json'"
    data = """ '{"text": "${slackMsg}"}' """

    sh """ curl -H ${header} -d ${data}"""
    sh '''curl -H 'Content-Type: application/json' -d '{"text": "${slackMsg}"' "${TEAMS_WEBHOOK}"}'''

    
  }
  else {
    
    slackMsg = "${msg}, code: ${CODEBASE}, URL:${env.BUILD_URL}"
    //sh """curl -H 'Content-Type: application/json' -d '{"text": ${slackMsg}' ${TEAMS_WEBHOOK}}"""
    sh '''curl -H 'Content-Type: application/json' -d '{"text": "${slackMsg}"' "${TEAMS_WEBHOOK}"}'''

  }  
  
  println(slackMsg)



}



    