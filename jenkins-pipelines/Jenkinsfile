// //WORK IN PROGRESS
pipeline {
  agent {
    dockerfile {
      dir "test"
      label "docker"
      additionalBuildArgs "-t conservator-cli/test"
      args "--add-host conservator-mongo:127.0.0.1 --user root --init --privileged -v /var/run/docker.sock:/var/run/docker.sock"
    }
  }
  options {
    timeout(time: 45, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  environment {    
    CODEBASE = 'flirconservator-cli'
    TEAMS_WEBHOOK = credentials("Conservator-CICD-Incoming")
  }
  
  stages {
    stage('PR') {
      when {
        beforeAgent true        
        not {
          branch 'main'
        }
      }

      stages {
        stage("Install") {
          steps {
            sendNotifications("PR pipeline started")
            sh "echo 2.12.0 > RELEASE-VERSION"
            sh "pip install --no-cache-dir -r requirements.txt"
            sh "python setup.py --version"
            sh "pip install --no-cache-dir ."
            sh "git config --global user.name 'Test User'"
            sh "git config --global user.email 'test@example.com'"
          }
        }

        stage("Documentation Tests") {
          steps {
            echo "Building docs..."
            dir("docs") {
              sh "make html"
            }
          }
        }

        stage("Unit Tests") {
          steps {
            echo "Running unit tests..."
            dir("unit-tests") {
              sh "pytest -v $WORKSPACE/test/unit"
            }
          }
        }
      }
    } 
    
    stage('Main') {
      when {
        beforeAgent true
        branch 'main'
      }
      stages {
        stage('MAIN Build'){
          steps {
            script {
              sendNotifications("Merge to main pipeline started")
              def test = build job: 'Flirconservator+CLI_Integration_Testing', parameters: [string(name: 'IMAGE_TYPE', value: 'LOCAL'), string(name: 'LOCAL_BRANCH', value: 'master')]
            }
          }
        }
         stage("Install") {
          steps {            
            sh "echo 2.12.0 > RELEASE-VERSION"
            sh "pip install --no-cache-dir -r requirements.txt"
            sh "python setup.py --version"
            sh "pip install --no-cache-dir ."
            sh "git config --global user.name 'Test User'"
            sh "git config --global user.email 'test@example.com'"
          }
        }

          stage("Documentation Tests") {
          steps {
            echo "Building docs..."
            dir("docs") {
              sh "make html"
            }
          }
        }

    

      }
    }
  }
  
  post {
    always {
      script {
        echo 'post'
        cleanWs()
        sendNotifications ("post")
      }
    }
    
    success {
      script {
        echo 'success'
      }
    }
    
    failure {
      echo 'fail'
    }
  }
}

def sendNotifications(String msg){
   if (msg == "post"){  
     teamsMsg = currentBuild.result   
   }
  else {
     teamsMsg = "${msg}, code: ${CODEBASE}, URL:${env.BUILD_URL}"  
  }
  
  sh_command = sh(    
    script: """curl -H 'Content-Type: application/json' -d '{"text": "$teamsMsg"}' ${TEAMS_WEBHOOK}""",    
    returnStdout: false
  ) 
}



    